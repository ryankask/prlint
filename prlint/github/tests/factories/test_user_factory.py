from django.contrib.auth import get_user_model
from django.test import TestCase

from ...factories import UserFactory


class TestUserFactory(TestCase):

    user_model = get_user_model()

    def test_make_single(self):
        """
        UserFactory can make a single User

        Names and email are generated by Fuzzy and are more than the empty
        string.
        """
        result = UserFactory()

        self.assertEqual(self.user_model.objects.count(), 1)
        user = self.user_model.objects.first()
        self.assertEqual(result, user)
        self.assertGreater(user.username, '')
        self.assertGreater(user.first_name, '')
        self.assertGreater(user.last_name, '')
        self.assertGreater(user.email, '')
        self.assertTrue(user.check_password('password'))
        self.assertTrue(user.is_active)
        self.assertFalse(user.is_staff)
        self.assertFalse(user.is_superuser)

    def test_make_multi(self):
        """
        UserFactory can create multiple Users with default settings

        Generated username, names and email do not match between created Users.
        NOTE possible failure if faker gives two identical values on
        consecutive calls.
        """
        UserFactory.create_batch(2)

        self.assertEqual(self.user_model.objects.count(), 2)
        user_first = self.user_model.objects.first()
        user_last = self.user_model.objects.last()
        for varname in ('username', 'first_name', 'last_name', 'email'):
            self.assertNotEqual(
                getattr(user_first, varname),
                getattr(user_last, varname),
                'Both users found to have same "{}" attribute'.format(varname)
            )

    def test_user_custom_password(self):
        """
        UserFactory can be passed a custom password and sets it
        """
        UserFactory(password='custom$password')

        user = self.user_model.objects.first()
        self.assertTrue(user.check_password('custom$password'))

    def test_user_factory_create_unusable_pw(self):
        """
        UserFactory can create a user with an unusable password
        """
        UserFactory(password=None)

        user = self.user_model.objects.first()
        self.assertFalse(user.has_usable_password())
        self.assertTrue(user.is_active)

    def test_no_email(self):
        """
        UserFactory can create user without email address
        """
        UserFactory(email='')

        user = self.user_model.objects.first()
        self.assertEqual(user.email, '')

    def test_inactive(self):
        """
        UserFactory can create inactive user
        """
        UserFactory(is_active=False)

        user = self.user_model.objects.first()
        self.assertFalse(user.is_active)

    def test_staff(self):
        """
        UserFactory can create staff user
        """
        UserFactory(is_staff=True)

        user = self.user_model.objects.first()
        self.assertTrue(user.is_staff)

    def test_superuser(self):
        """
        UserFactory can create superuser user
        """
        UserFactory(is_superuser=True)

        user = self.user_model.objects.first()
        self.assertTrue(user.is_superuser)
